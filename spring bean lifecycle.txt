1.通过实现BeanFactoryPostProcessor接口；实现postProcessBeanFactory方法对配置元数据进行 后处理；
2.在bean实例化之前调用InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation()方法，
3.实例化，根据配置调用bean的构造函数或工厂方法实例化bean
4.调用InstantiationAwareBeanPostProcessor中的postProcessAfterInstantiation方法；
5.调用InstantiationAwareBeanPostProcessor中的postProcessPropertyValues方法，如果<bean>配置了<property>属性，容器在第六步着手配置值设置到bean对应的属性之前会调用该方法
6.设置属性值，调用bean的属性设置方法设置属性
7.调用BeanNameAware的setBeanName的方法
8.调用BeanFactoryAware的setBeanFactory方法
9.调用ApplicationContextAware的setApplicationContext方法
10.调用BeanPostProcessor中的postProcessBeforeInitialization方法，对bean进行加工，一般AOP在这里实现
11.调用InitialzingBean的afterProertiesSet方法
12.调用通过<init-method>属性配置的初始化方法
13.调用BeanPostProcessor中的postProcessAfterInitialization方法


scope=prototype,将bean返回给调用者，调用者负责bean后续生命周期的管理；如果scope=singleton,则将bean放入spring的ioc容器的缓存池中。并将bean引用返回给调用者

14.调用disposable的afterpropertiesSet()方法。容器关闭时会调用该接口，可以在此编写资源释放，记录日志等操作
15.调用destroy-method属性配置的销毁方法



bean自身的方法调用构造函数实例化bean,调用setter设置属性，调用init-method,destroy-method;

bean级生命周期接口方法：如BeanNameAware,BeanFactoryAware,InitializingBean和DisposableBean,这些接口由bean直接实现

容器级生命周期接口方法：如instantiationAwareBeanPostProcessor和BeanPostProcessor这两个接口实现，一般称他们为后处理器，实现类独立于bean，以容器附加装置的形式注册到spring当中。
当spring创建任何bean时，这些后处理器都会发生作用，所以后处理器的影响是全局性的

Bean级生命接口和容器级生命接口是个性和共性辩证统一思想的体现。前者解决bean的个性化处理的问题，后者解决容器中某些bean共性化处理的问题

Spring容器中可以注册多个后处理器，只要他们实现org.springframework.core.Ordered接口，容器将按特定的顺序依次调用这些后处理器

InstantiationAwareBeanPostProcessor其实是BeanPostProcessor的子接口，在spring 1.2中定义，在spring2.0中为其提供了一个适配器类InstantiationAwareBeanPostProcessorAdapter。